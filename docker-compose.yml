version: '2'

services:

  # app service - can be used in development interactively or production
  #
  #   Development - start with docker-compose run --rm --service-ports --entrypoint=/bin/bash app
  #   Production  - start with docker-compose up -d
  #
  #   run -rm will create an interactive shell in which we can manually
  #   start the server as we develop to test things. (rm means remove
  #   after running and auto-runs shell).  We also expose service-ports
  #   (since run doesn't do this automatically) and override sh to
  #   use bash.
  #
  #   up -d will run the default command (server mode) of the app as
  #   a daemon
  #
  #   both approaches will auto-create the dependent DB container.
  #
  #   TBD - define the psql container in such a way that it is available
  #         to be docker-compose run -rm psql (as it is today) but won't
  #         attempt to start when we run docker-compose up (as it does
  #         today).  Note - there doesn't seem to be a way to do this
  #         without multiple yml files (which I hate)...
  #         https://github.com/docker/compose/issues/1896
  #
  #   note that right now this will mount the source in both environments
  #   which eventually we will not want to do and will probably have some
  #   solution that requires two docker-compose files and leverages extends.
  app:
    image: dsblox/pim
    ports: 
      - "443:4000"
    working_dir: /app
    environment:
      # i preferred to have the PIM code use env for host lookup than 
      # hard-coding the host.  Docker does set up a "host" within the
      # container with the same name as the link alias.
      DAB_DB_HOST: db 
    depends_on:
      db:
        condition: service_healthy
    links:
      - db
    command: pim -server 


  # for development it can be convenient to jump into psql to play with
  # the database directly.  Use by calling:
  #  docker-compose run --rm psql
  psql:
    image: postgres
    environment: 
      PGPASSWORD: postgres
    depends_on:
      - db
    links:
      - db:postgres
    command: psql -h postgres -U postgres
    profiles: ["manual-use"] # makes it easy to run manually, but ignores on up / start

  # a simple posgres instance - the app will initialize this DB if it
  # finds it empty - so vanilla postgres is all that is needed here
  # designed in both dev and production to be run in daemon mode:
  # docker-compose run -d db    to run just the DB
  # docker-compose 
  db:
    image: postgres
    environment: 
      POSTGRES_PASSWORD: postgres
    volumes:
       - ./pgdata:/var/lib/postgresql/data      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5      

